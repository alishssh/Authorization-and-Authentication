"""create users table

Revision ID: 4f76fec0cf3d
Revises: 
Create Date: 2025-02-03 12:44:09.609976

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4f76fec0cf3d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('role', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('username')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=False)
    op.drop_index('myapp_books_author_id_e41b8b2b', table_name='myapp_books')
    op.drop_table('myapp_books')
    op.drop_table('stocks')
    op.drop_table('myapp_author')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('myapp_author',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=254), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='myapp_author_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('stocks',
    sa.Column('idstatementnav', sa.INTEGER(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('Fund_full_Name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('Date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('StatementOfNav', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('Investments', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ListedSecurities', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('RegisteredEquities', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('IpoInvestment', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('GovernmentBonds', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('CorporateDebentures', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('OtherGovernmentSecurities', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('BankFixedDeposits', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('OtherInvestments', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('CurrentAssets', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('BankBalance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('OtherCurrentAssets', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('CurrentLiabilities', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('NetAssetValueGross', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('FundManagementAndDepositoryFee1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('FundSupervisorFee1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('NetAssetValue', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('UnitsOutstanding', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('NavPerUnit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('IncomeStatement', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('Income', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('RealisedIncome', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('UnrealisedIncome', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('Expenses', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('PreoperatingExpenses', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('NoticePublicationFee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('AuditFee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('FundManagementAndDepositaryFee2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('FundSupervisorFee2', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('OtherExpenses', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('NetIncome', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('Ticker', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('idstatementnav', name='stocks_pkey')
    )
    op.create_table('myapp_books',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('publication_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['myapp_author.id'], name='myapp_books_author_id_e41b8b2b_fk_myapp_author_id', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name='myapp_books_pkey')
    )
    op.create_index('myapp_books_author_id_e41b8b2b', 'myapp_books', ['author_id'], unique=False)
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
